package com.dtamai.onspec;

/**
 * Facade event to make easy write specs.
 * @listens NewSuite Runs a new spec suite
 */
event Suite {

  /** @private */
  wildcard integer _id;

  /** @private */
  SpecRunner _runner;

  /** @private */
  SpecReporter _reporter;

  /** @private */
  listener waitNewSuite;

  /**
   * Create a context to group examples.
   * It should be used to define the id param for a Spec event.
   * @param text Description of the context
   * @return The id that identifies this context
   */
  action describe(string text) returns integer {
    return _runner.addContext(text);
  }

  /**
   * Create an example. It is the runnable spec.
   * It should be used to define the id param for a Spec event.
   * @param text Description of the example
   * @return The id that identifies this example
   */
  action it(string text) returns integer {
    return _runner.addSpec(text);
  }

  /**
   * Action to initialize the suite. It needs to be called before a NewSuite.
   * @param runnable The action that contains the contexts and example (Spec listeners)
   * @listens NewSuite Runs a new spec suite
   * @see Spec Runs a context or an example
   */
  action init(action<> runnable) {
    self._id := integer.getUnique();

    terminate();

    waitNewSuite := on all NewSuite() -> _SpecDiscover() {
      spawn _handleNewSuite(runnable);
    }
  }

  /**
   * Action to terminate the suite.
   * When terminated, the suite doesn't respond to NewSuite, but will not stop
   * pending specs.
   */
  action terminate() {
    waitNewSuite.quit();
  }

  /**
   * Notifies that the example was successful.
   * It should be used inside a listener block of an asynchronous spec.
   * It terminates the current example.
   */
  action pass() {
    _reporter.pass();
  }

  /**
   * Notifies that the example should be skipped.
   * Skipped examples are verbosely reported at the end of the specs.
   * It terminates the current example.
   */
  action skip() {
    _reporter.skip();
  }

  /**
   * Notifies that the example was not successful.
   * It should be used inside a listener block of an asynchronous spec.
   * It terminates the current example.
   */
  action fail(string reason) {
    _reporter.fail(reason);
  }

  /**
   * Notifies that the example has finished.
   * It should be used to terminate a synchronous spec.
   */
  action done() {
    _reporter.pass();
  }

  /**
   * Returns this Suite's id
   */
  action getId() returns integer {
    return self._id;
  }

  /** @private */
  action _handleNewSuite(action<> runnable) {
    integer id := getId();
    route _SpecPresent(id);
    _SpecBegin begin;
    on _SpecBegin(id=id):begin {
      _runner.run(runnable, id, begin.config);
    }
  }
}
