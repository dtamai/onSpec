package org.onspec;

/** @private */
event Failure {
  wildcard string reason;
}

/** @private */
event Success {
}

/** @private */
event Skip {
}

/** @private */
event Done {
}

/**
 * Event object that reports the result of examples.
 *
 * onSpec verifications can be extended using this event, it is important to
 * note that some actions terminates the current example, so there can be
 * multiple verifications using conditional failures and a final success
 * that will be sent only if no failure had been sent.
 *
 * In the examples context, terminate means "allow the example to terminate".
 * It is not possible to interrupt the execution of the it block, so one single
 * example can fail many times and still end by calling SpecReporter#done, which
 * is one form of success, that example will be recorded as both a failure and
 * a success; it is up to the final suite reporter to decide.
 *
 * This may be the desired behavior, since it is not possible to interrupt code.
 */
event SpecReporter {

  /**
   * Notifies that the example was successful.
   * It should be used inside a listener block of an asynchronous spec.
   * It terminates the current example.
   */
  action passAndTerminate() {
    route Success();
    done();
  }

  /**
   * Alias for #passAndTerminate
   * There is no need to pass and not terminate. Examples are passing until
   * they fail.
   */
  action pass() {
    passAndTerminate();
  }

  /**
   * Notifies that the example was not successful.
   * It should be used inside a listener block of an asynchronous spec.
   * It terminates the current example.
   */
  action failAndTerminate(string reason) {
    route Failure(reason);
    done();
  }

  /**
   * Notifies that an assertion failed.
   * It should be used when there can be many failures (e.g. asserting many
   * values in a sequence).
   * It does not terminate the current example.
   */
  action fail(string reason) {
    route Failure(reason);
  }

  /**
   * Notifies that the example should be skipped.
   * Skipped examples are verbosely reported at the end of the specs.
   * It terminates the current example.
   */
  action skipAndTerminate() {
    route Skip();
    done();
  }

  /**
   * Alias for #skipAndTerminate
   * Skip and continue doesn't make sense.
   */
  action skip() {
    skipAndTerminate();
  }

  /**
   * Notifies that the example has finished.
   * It should be used to terminate a synchronous spec.
   */
  action done() {
    route Done();
  }
}

