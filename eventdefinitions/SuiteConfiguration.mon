package com.dtamai.onspec;

event SuiteConfiguration {
  dictionary<string, string> config;

  constant string kvPairSep := ", ";
  constant string kvSep := ":";

  action randomSeedParamName() returns string { return "randomSeed"; }
  action randomSeedDefaultValue() returns integer { return 1; }

  action doNotRandomizeOrderParamName() returns string { return "doNotRandomizeOrder_I_WRITE_BAD_TESTS"; }

  action timeoutParamName() returns string { return "timeout"; }
  action timeoutDefaultValue() returns float { return 0.2; }

  action hasRandomSeed() returns boolean {
    return hasParam(randomSeedParamName());
  }

  action getRandomSeed() returns integer {
    return getIntegerOrElse(randomSeedParamName(), randomSeedDefaultValue());
  }

  action shouldRandomize() returns boolean {
    return not hasParam(doNotRandomizeOrderParamName());
  }

  action setRandomSeed(integer seed) {
    setIntegerParam(randomSeedParamName(), seed);
  }

  action getTimeout() returns float {
    return getFloatOrElse(timeoutParamName(), timeoutDefaultValue());
  }

  action hasParam(string param) returns boolean {
    return config.hasKey(param);
  }

  action getIntegerOrElse(string param, integer orElse) returns integer {
    integer value := orElse;
    if config.hasKey(param) then {
      string stringValue := config[param];
      if integer.canParse(stringValue) then {
        value := integer.parse(stringValue);
      } else {
        log "Expected a parseable integer for '" + param + "', received '" + stringValue + "'" at ERROR;
      }
    }

    return value;
  }

  action setIntegerParam(string param, integer value) {
    config[param] := value.toString();
  }

  action getFloatOrElse(string param, float orElse) returns float {
    float value := orElse;
    if config.hasKey(param) then {
      string stringValue := config[param];
      if float.canParse(stringValue) then {
        value := float.parse(stringValue);
      } else {
        log "Expected a parseable float for '" + param + "', received '" + stringValue + "'" at ERROR;
      }
    }

    return value;
  }

  action fromString(string configString) returns SuiteConfiguration {
    dictionary<string, string> configuration := {};
    sequence<string> kvPairs := kvPairSep.tokenize(configString);

    string pair, k, v;
    sequence<string> kv;
    for pair in kvPairs {
      kv := kvSep.tokenize(pair);
      if kv.size() = 2 then {
        k := kv[0];
        v := kv[1];
        configuration[k] := v;
      } else {
        log "Expected a parseable configuration string in " + kv.toString() at ERROR;
      }
    }
    return SuiteConfiguration(configuration);
  }
}

