package org.onspec.internal;

using org.onspec.Spec;
using org.onspec.SuiteConfiguration;

/** @private */
event SpecRunner {

  action<string> returns integer addContext;
  action<string> returns integer addSpec;
  action<string> addConfig;

  action run(action<> runnable, integer specId, SuiteConfiguration config) {
    self.specId := specId;
    specsMonitorEntryPoint := runnable;
    self.config := config;
    discoverAllExamples(doSpawn);
  }


  // privates

  action discoverContext(string text) returns integer {
    integer id := getId();
    storeContext(text, id);
    clearConfig();

    pendingContextsId.append(id);

    return id;
  }

  action discoverExample(string text) returns integer {
    integer id := getId();
    storeExample(text, id);
    clearConfig();

    return id;
  }

  action configure(string configString) {
    nextConfig := nextConfig.fromString(configString);
  }

  action repeatContextsId(string text) returns integer {
    return contextsMap[text];
  }

  action repeatExamplesId(string text) returns integer {
    return examplesMap[text];
  }

  action noopConfig(string configString) {
  }

  action storeContext(string text, integer id) {
    contexts[id] := ContextDescription(id, text, surroundingContext.idSequenceToOpen.clone(), buildLocalConfig());
    contextsMap[text] := id;
    contextsOrder.append(id);
  }

  action storeExample(string text, integer id) {
    examplesMap[text] := id;
    examplesOrder.append(id);
    examples[id] := SpecDescription(id, text, surroundingContext.idSequenceToOpen.clone(), buildLocalConfig());
  }

  action getId() returns integer{
    return integer.getUnique();
  }

  action discoverAllExamples(action<> nextStep) {
    surroundingContext := createRootContext(self.specId);
    prepareDiscovery();
    rewindSpecMonitor();
    openContextsForDiscovery(nextStep);
  }

  action prepareDiscovery() {
    addContext := discoverContext;
    addSpec := discoverExample;
    addConfig := configure;
  }

  action openContextsForDiscovery(action<> nextStep) {
    if pendingContextsId.size() > 0 then {
      cursor := pendingContextsId[0];
      updateCurrentContext(cursor);

      route Spec(cursor);
      on completed Spec(cursor) {
        pendingContextsId.remove(0);
        openContextsForDiscovery(nextStep);
      }
    } else {
      disableDiscovery();
      nextStep();
      die;
    }
  }

  action buildLocalConfig() returns SuiteConfiguration {
    return config.merge(surroundingContext.config).merge(nextConfig);
  }

  action clearConfig() {
    nextConfig := new SuiteConfiguration;
  }

  action disableDiscovery() {
    addContext := repeatContextsId;
    addSpec := repeatExamplesId;
    addConfig := noopConfig;
  }

  action rewindSpecMonitor() {
    specsMonitorEntryPoint();
    cursor := contextsOrder[0];
  }

  action doSpawn() {
    spawn runEntry();
  }

  action runEntry() {
    listenProgressionEvents();
    runExamples();
  }

  action runExamples() {
    pendingExamplesId := defineExamplesOrder(examplesOrder);
    runFirstExample();
  }

  action runFirstExample() {
    if pendingExamplesId.size() > 0 then {
      integer exId := pendingExamplesId[0];
      cursor := exId;

      spawn runExample(exId);
      listener timeout := on wait (examples[exId].config.getTimeout()*2.0) {
        route org.onspec.internal.Error("example died unexpectedly", getCurrentContextDescriptionList());
        route SpecDone(exId);
      }
      on SpecDone(exId) {
        timeout.quit();
        pendingExamplesId.remove(0);
        runFirstExample();
      }
    } else {
      route SpecEnd(self.specId);
      die;
    }
  }

  action runExample(integer exampleId) {
    rewindSpecMonitor();
    SpecDescription example := examples[exampleId];

    integer ctxId;
    for ctxId in examples[exampleId].parentContextsId {
      route Spec(ctxId);
    }

    route Spec(exampleId);
    on wait (example.config.getTimeout()) and not SpecDone(exampleId) {
      org.onspec.SpecReporter().fail("timeout");
    }
    on SpecDone(exampleId) {
      die;
    }
  }

  action getCurrentContextDescriptionList() returns sequence<string> {
    sequence<string> ctxList := [];
    integer ctxId;
    for ctxId in examples[cursor].parentContextsId {
      ctxList.append(contexts[ctxId].text);
    }
    ctxList.append(examples[cursor].text);
    return ctxList;
  }

  action createRootContext(integer id) returns ContextDescription {
    ContextDescription c := new ContextDescription;
    c.id := id;
    c.idSequenceToOpen := [];
    return c;
  }

  action updateCurrentContext(integer id) {
    surroundingContext := contexts[id];
    surroundingContext.idSequenceToOpen.append(id);
  }

  action listenProgressionEvents() {
    org.onspec.Skip s;
    on all org.onspec.Skip():s {
      route Skip(getCurrentContextDescriptionList());
    }

    on all org.onspec.Success() {
      route Success();
    }

    org.onspec.Failure f;
    on all org.onspec.Failure():f {
      route Failure(f.reason, getCurrentContextDescriptionList());
    }

    on all org.onspec.Done() {
      route SpecDone(cursor);
    }
  }

  action defineExamplesOrder(sequence<integer> list) returns sequence<integer> {
    if config.shouldRandomize() then {
      RandomGenerator generator := new RandomGenerator;
      generator.init(config.getRandomSeed());
      return Shuffler(generator).shuffle(list);
    } else {
      return list;
    }
  }

  // Identifies the client monitor
  integer specId;

  // Action in the client monitor that contains the specs
  action<> specsMonitorEntryPoint;

  dictionary<string /*text*/, integer /*id*/> contextsMap;
  sequence<integer /*id*/> contextsOrder;
  dictionary<string /*text*/, integer /*id*/> examplesMap;
  sequence<integer /*id*/> examplesOrder;

  // Current context/example. While in discovery, its value is the current
  // context; while running examples, its value is the current example
  // This variable is not relevant for the monitor that is spawned to run
  // examples
  integer cursor;

  // Used while discovering examples, holds the _ContextDescription of the
  // most internal context that is outside the current context.
  ContextDescription surroundingContext;

  // Used while discovering examples, holds the ids of contexts still closed
  sequence<integer> pendingContextsId;
  // Used while running examples, is a modifiable copy of the examples list
  sequence<integer> pendingExamplesId;

  // Holds all contexts, its is populated in the first run and must be
  // read-only after discovery is done
  dictionary<integer /*id*/, ContextDescription> contexts;

  // Holds all examples, it is populated in the first run and must be
  // read-only after discovery is done
  dictionary<integer /*id*/, SpecDescription> examples;

  // Global suite configuration
  SuiteConfiguration config;

  // Cache configuration
  SuiteConfiguration nextConfig;

  chunk __deadWeight;
}
