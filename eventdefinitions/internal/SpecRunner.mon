package org.onspec.internal;

using org.onspec.Spec;
using org.onspec.Before;
using org.onspec.After;
using org.onspec.SuiteConfiguration;

/** @private */
event SpecRunner {

  action<string> returns integer addContext;
  action<string> returns integer addSpec;
  action<string> returns integer ignoreSpec;
  action<string> addConfig;

  action run(action<> runnable, integer specId, SuiteConfiguration config) {
    self.specId := specId;
    specsMonitorEntryPoint := runnable;
    self.config := config;
    discoverAllExamples();
  }


  // privates

  action discoverContext(string text) returns integer {
    integer id := getId();
    storeContext(text, id);
    clearConfig();

    pendingContextsId.append(id);

    return id;
  }

  action discoverExample(string text) returns integer {
    integer id := getId();
    storeExample(text, id);
    clearConfig();

    return id;
  }

  action configure(string configString) {
    nextConfig := nextConfig.fromString(configString);
  }

  action repeatContextsId(string text) returns integer {
    return contextsMap[text];
  }

  action repeatExamplesId(string text) returns integer {
    if givenExamples.indexOf(text) < 0 then {
      givenExamples.append(text);
      return examplesMap[text];
    } else {
      // return an invalid number to be sure that the example will not open
      return -1;
    }
  }

  action registerIgnoredExample(string text) returns integer {
    integer id := getId();
    route IgnoredExampleDescription(id, text, surroundingContext.idSequenceToOpen.clone());
    return id;
  }

  action noopIgnore(string text) returns integer {
    return -1;
  }

  action noopConfig(string configString) {
  }

  action storeContext(string text, integer id) {
    contexts[id] := ContextDescription(id, text, surroundingContext.idSequenceToOpen.clone(), buildLocalConfig());
    contextsMap[text] := id;
    route contexts[id];
  }

  action storeExample(string text, integer id) {
    if examplesMap.hasKey(text) then {
      route SkippedExampleDescription(id, text, surroundingContext.idSequenceToOpen.clone(), "duplicate");
    } else {
      examples[id] := ExampleDescription(id, text, surroundingContext.idSequenceToOpen.clone(), buildLocalConfig());
      examplesMap[text] := id;
      route examples[id];
    }
  }

  action getId() returns integer{
    return integer.getUnique();
  }

  action discoverAllExamples() {
    ContextDescription rootContext := new ContextDescription;
    rootContext.id := self.specId;

    surroundingContext := rootContext;
    prepareDiscovery();
    rewindSpecMonitor();
    openContextsForDiscovery();
  }

  action prepareDiscovery() {
    addContext := discoverContext;
    addSpec := discoverExample;
    addConfig := configure;
    ignoreSpec := registerIgnoredExample;
  }

  action openContextsForDiscovery() {
    if pendingContextsId.size() > 0 then {
      cursor := pendingContextsId[0];
      updateCurrentContext(cursor);

      route Spec(cursor);
      on completed Spec(cursor) {
        pendingContextsId.remove(0);
        openContextsForDiscovery();
      }
    } else {
      disableDiscovery();
      doSpawn();
      route SpecReady(self.specId);
      die;
    }
  }

  action buildLocalConfig() returns SuiteConfiguration {
    return config.merge(surroundingContext.config).merge(nextConfig);
  }

  action clearConfig() {
    nextConfig := new SuiteConfiguration;
  }

  action disableDiscovery() {
    addContext := repeatContextsId;
    addSpec := repeatExamplesId;
    addConfig := noopConfig;
    ignoreSpec := noopIgnore;
  }

  action rewindSpecMonitor() {
    specsMonitorEntryPoint();
    cursor := 0;
  }

  action doSpawn() {
    spawn waitToRunExamples();
  }

  action waitToRunExamples() {
    integer id;
    for id in examples.keys() {
      on RunExample(id) {
        cursor := id;
        spawn runExample(id);
      }
    }
  }

  action runExample(integer exampleId) {
    rewindSpecMonitor();
    ExampleDescription example := examples[exampleId];

    integer ctxId;
    for ctxId in examples[exampleId].parentContextsId {
      route Spec(ctxId);
    }

    route Before();
    on completed Before() {
      route Spec(exampleId);
      on wait (example.config.getTimeout()) and not SpecDone(exampleId) {
        org.onspec.SpecReporter().fail("timeout");
      }
      on SpecDone(exampleId) {
        route After();
        on completed After() {
          die;
        }
      }
    }
  }

  action updateCurrentContext(integer id) {
    surroundingContext := contexts[id];
    surroundingContext.idSequenceToOpen.append(id);
  }

  // Identifies the client monitor
  integer specId;

  // Action in the client monitor that contains the specs
  action<> specsMonitorEntryPoint;

  dictionary<string /*text*/, integer /*id*/> contextsMap;
  dictionary<string /*text*/, integer /*id*/> examplesMap;
  sequence<string> givenExamples;

  // Current context/example. While in discovery, its value is the current
  // context; while running examples, its value is the current example
  // This variable is not relevant for the monitor that is spawned to run
  // examples
  integer cursor;

  // Used while discovering examples, holds the _ContextDescription of the
  // most internal context that is outside the current context.
  ContextDescription surroundingContext;

  // Used while discovering examples, holds the ids of contexts still closed
  sequence<integer> pendingContextsId;

  // Holds all contexts, its is populated in the first run and must be
  // read-only after discovery is done
  dictionary<integer /*id*/, ContextDescription> contexts;

  // Holds all examples, it is populated in the first run and must be
  // read-only after discovery is done
  dictionary<integer /*id*/, ExampleDescription> examples;

  // Global suite configuration
  SuiteConfiguration config;

  // Cache configuration
  SuiteConfiguration nextConfig;

  chunk __deadWeight;
}
