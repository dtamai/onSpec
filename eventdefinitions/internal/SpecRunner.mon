package org.onspec.internal;

using org.onspec.Spec;
using org.onspec.Before;
using org.onspec.After;
using org.onspec.SuiteConfiguration;

/** @private */
event SpecRunner {

  // interface ==============================
  action<string> returns integer addContext;
  action<string> returns integer addSpec;
  action<string> returns integer ignoreSpec;
  action<string> addConfig;
  // =========================================

  action run(action<> runnable, integer specId, SuiteConfiguration config) {
    self.specId := specId;
    specsMonitorEntryPoint := runnable;
    recorder.globalConfig := config;
    discoverAllExamples();
  }


  // privates
  action getId() returns integer{
    return integer.getUnique();
  }

  action discoverAllExamples() {
    prepareDiscovery();
    rewindSpecMonitor();
    openContextsForDiscovery();
  }

  action prepareDiscovery() {
    recorder := new SpecRunnerRecorder;
    recorder.init(specId, contextsMap, examplesMap, examples, getId);

    addContext := recorder.addContext;
    addSpec := recorder.addSpec;
    addConfig := recorder.addConfig;
    ignoreSpec := recorder.ignoreSpec;
  }

  action openContextsForDiscovery() {
    sequence<integer> pendingContextsId := recorder.pendingContextsId;
    if pendingContextsId.size() > 0 then {
      cursor := pendingContextsId[0];
      recorder.updateCurrentContext(cursor);

      route Spec(cursor);
      on completed Spec(cursor) {
        pendingContextsId.remove(0);
        openContextsForDiscovery();
      }
    } else {
      disableDiscovery();
      doSpawn();
      route SpecReady(self.specId);
      die;
    }
  }

  action disableDiscovery() {
    repeater := new SpecRunnerRepeater;
    repeater.init(contextsMap, examplesMap, getId);

    addContext := repeater.addContext;
    addSpec := repeater.addSpec;
    addConfig := repeater.addConfig;
    ignoreSpec := repeater.ignoreSpec;
  }

  action rewindSpecMonitor() {
    specsMonitorEntryPoint();
    cursor := 0;
  }

  action doSpawn() {
    spawn waitToRunExamples();
  }

  action waitToRunExamples() {
    integer id;
    for id in examples.keys() {
      on RunExample(id) {
        cursor := id;
        spawn runExample(id);
      }
    }
  }

  action runExample(integer exampleId) {
    rewindSpecMonitor();
    ExampleDescription example := examples[exampleId];

    integer ctxId;
    for ctxId in examples[exampleId].parentContextsId {
      route Spec(ctxId);
    }

    route Before();
    on completed Before() {
      route Spec(exampleId);
      on wait (example.config.getTimeout()) and not SpecDone(exampleId) {
        org.onspec.SpecReporter().fail("timeout");
      }
      on SpecDone(exampleId) {
        route After();
        on completed After() {
          die;
        }
      }
    }
  }

  // Identifies the client monitor
  integer specId;

  // Action in the client monitor that contains the specs
  action<> specsMonitorEntryPoint;

  dictionary<string /*text*/, integer /*id*/> contextsMap;
  dictionary<string /*text*/, integer /*id*/> examplesMap;

  // Current context/example. While in discovery, its value is the current
  // context; while running examples, its value is the current example
  // This variable is not relevant for the monitor that is spawned to run
  // examples
  integer cursor;

  // Holds all examples, it is populated in the first run and must be
  // read-only after discovery is done
  dictionary<integer /*id*/, ExampleDescription> examples;

  // Repeat/Noop implementation
  SpecRunnerRepeater repeater;

  // Recorder implementation
  SpecRunnerRecorder recorder;

  chunk __deadWeight;
}
