package org.onspec.expectation;

event DecimalValue {
  wildcard decimal actual;

  /** @private */
  action testFailed(decimal expected, string expectation) {
    string reason := actual.toString() + " expected to be " + expectation +
                     " " + expected.toString();
    org.onspec.SpecReporter().fail(reason);
  }

  action mustBe(decimal expected) {
    failIfInfinite(expected);
    if not expected = actual then {
      testFailed(expected, "equal");
    }
  }

  action mustNotBe(decimal expected) {
    failIfInfinite(expected);
    if expected = actual then {
      testFailed(expected, "not equal");
    }
  }

  action mustBeNaN() {
    if not actual.isNaN() then {
      org.onspec.SpecReporter().fail(actual.toString() +
        " expected to be decimal.NAN");
    }
  }

  action mustBeFinite() {
    if not actual.isFinite() then {
      org.onspec.SpecReporter().fail(actual.toString() +
        " expected to be finite");
    }
  }

  action mustBeInfinite() {
    if not actual.isInfinite() then {
      org.onspec.SpecReporter().fail(actual.toString() +
        " expected to be decimal.INFINITY");
    }
  }

  action failIfInfinite(decimal expected) {
    if actual.isInfinite() or expected.isInfinite() then {
      org.onspec.SpecReporter().fail("Trying to compare infinite values");
    }
  }
}

