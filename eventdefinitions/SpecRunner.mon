package com.dtamai.onspec;

/** @private */
event SpecRunner {

  integer _specId;

  //TODO: configuration?
  constant float timeout := 0.2;

  dictionary<string /*text*/, integer /*id*/> contextsMap;
  sequence<integer /*id*/> contextsOrder;
  action<string> returns integer addContext;
  action discoverContext(string text) returns integer {
    integer id := _getId();
    __contexts[id] := _ContextDescription(id, text, __currContext.idSequenceToOpen.clone());
    contextsMap[text] := id;
    contextsOrder.append(id);
    _pendingContextsId.append(id);

    _exampleRootsTags.append(_currTags);
    _currTags := "";

    return id;
  }

  dictionary<string /*text*/, integer /*id*/> examplesMap;
  sequence<integer /*id*/> examplesOrder;
  action<string> returns integer addSpec;
  action discoverExample(string text) returns integer {
    integer id := _getId();
    examplesMap[text] := id;
    examplesOrder.append(id);
    __examples[id] := _SpecDescription(id, text, __currContext.idSequenceToOpen.clone());

    _currTags := "";

    return id;
  }

  action repeatContextsId(string text) returns integer {
    return contextsMap[text];
  }

  action repeatExamplesId(string text) returns integer {
    return examplesMap[text];
  }

  action addTags(string tags) {
    _currTags := tags;
  }

  action run(action<> runnable, integer specId) {
    self._specId := specId;
    _entryPoint := runnable;
    discoverAllExamples(_doSpawn);
  }


  // privates

  action _getId() returns integer{
    return integer.getUnique();
  }

  action discoverAllExamples(action<> nextStep) {
    __currContext := _createRootContext(self._specId);
    prepareDiscovery();
    rewindSpecMonitor();
    openContextsForDiscovery(nextStep);
  }

  action prepareDiscovery() {
    addContext := discoverContext;
    addSpec := discoverExample;
  }

  action openContextsForDiscovery(action<> nextStep) {
    if _pendingContextsId.size() > 0 then {
      _cursor := _pendingContextsId[0];
      _updateCurrentContext(_cursor);

      route Spec(_cursor);
      on completed Spec(_cursor) {
        _pendingContextsId.remove(0);
        openContextsForDiscovery(nextStep);
      }
    } else {
      disableDiscovery();
      nextStep();
      die;
    }
  }

  action disableDiscovery() {
    addContext := repeatContextsId;
    addSpec := repeatExamplesId;
  }

  action rewindSpecMonitor() {
    _entryPoint();
    _cursor := contextsOrder[0];
  }

  action _doSpawn() {
    spawn _runEntry();
  }

  action _runEntry() {
    _listenProgressionEvents();
    runExamples();
  }

  sequence<integer> pendingExamplesId;
  action runExamples() {
    pendingExamplesId := examplesOrder.clone();
    runFirstExample();
  }

  action runFirstExample() {
    if pendingExamplesId.size() > 0 then {
      integer exId := pendingExamplesId[0];
      _cursor := exId;

      spawn _reallyRun(exId);
      on _SpecDone(exId) {
        pendingExamplesId.remove(0);
        runFirstExample();
      }
    } else {
      route _SpecEnd(self._specId);
      die;
    }
  }

  action _reallyRun(integer exampleId) {
    rewindSpecMonitor();
    _SpecDescription example := __examples[exampleId];

    integer ctxId;
    for ctxId in __examples[exampleId].parentContextsId {
      route Spec(ctxId);
    }

    route Spec(exampleId);
    on wait (timeout) {
      SpecReporter().fail("timeout");
    }
    on _SpecDone(exampleId) {
      die;
    }
  }

  action _getCurrentContext() returns sequence<string> {
    return _buildContextForExample(_cursor);
  }

  action _buildContextForExample(integer exampleId) returns sequence<string> {
    sequence<string> contexts := [];
    integer ctxId;
    for ctxId in __examples[exampleId].parentContextsId {
      contexts.append(__contexts[ctxId].text);
    }
    contexts.append(__examples[exampleId].text);
    return contexts;
  }

  action _createRootContext(integer id) returns _ContextDescription {
    _ContextDescription c := new _ContextDescription;
    c.id := id;
    c.idSequenceToOpen := [];
    return c;
  }

  action _updateCurrentContext(integer id) {
    __currContext := __contexts[id];
    __currContext.idSequenceToOpen.append(id);
  }

  action _listenProgressionEvents() {
    Skip s;
    on all Skip():s {
      route _Skip(_getCurrentContext());
    }

    on all Success() {
      route _Success();
    }

    Failure f;
    on all Failure():f {
      route _Failure(f.reason, _getCurrentContext());
    }

    on all Done() {
      route _SpecDone(_cursor);
    }
  }

  action<> _entryPoint;
  string _currTags;
  integer _cursor;
  sequence<integer> _pendingContextsId;
  sequence<string> _exampleRootsTags;

  // Holds all contexts, its is populated in the first run and should be
  // read-only after discovery is done
  dictionary<integer, _ContextDescription> __contexts;

  // Holds all examples, it is populated in the first run and should be
  // read-only after discovery is done
  dictionary<integer, _SpecDescription> __examples;

  _ContextDescription __currContext;
  chunk __deadWeight;
}
