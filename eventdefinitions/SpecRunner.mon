package com.dtamai.onspec;

event SpecRunner {
  wildcard integer _specId;

  action addContext(string text) returns integer {
    _incrCount();
    _exampleRoots.append(_counter);
    _exampleRootsTags.append(_currTags);
    _examplesTree.add(_counter, new sequence<integer>);
    _currTags := "";
    return _counter;
  }

  action addSpec(string text) returns integer {
    _incrCount();
    _examplesTree[_currRunningCounter].append(_counter);
    _currTags := "";
    return _counter;
  }

  action addTags(string tags) {
    _currTags := tags;
  }

  action run(action<> runnable, integer specId) {
    self._specId := specId;
    _entryPoint := runnable;
    _doSpawn();
  }

  action getCurrentSpec() returns integer {
    return _currRunningCounter;
  }

  action _incrCount() {
    _counter := _counter + 1;
  }

  action _doSpawn() {
    spawn _runEntry;
  }

  action _runEntry() {
    _entryPoint();
    _runRoot();
  }

  action _runRoot() {
    if _exampleRoots.size() > 0 then {
      _currRunningCounter := _exampleRoots[0];
      route Spec(_currRunningCounter);
      on completed Spec(_currRunningCounter) {
        _runExample(_currRunningCounter);
      }
    } else {
      route _SpecEnd(self._specId);
      die;
    }
  }

  action _runExample(integer rootId) {
    integer exampleId := _examplesTree[rootId][0];
    _currRunningCounter := exampleId;
    route Spec(exampleId);
    on _SpecDone(exampleId) {
      _examplesTree[rootId].remove(0);
      if _examplesTree[rootId].size() > 0 then {
        _runExample(rootId);
      } else {
        _exampleRoots.remove(0);
        _runRoot();
      }
    }
  }

  wildcard action<> _entryPoint;
  wildcard integer _counter;
  wildcard string _currTags;
  wildcard integer _currRunningCounter;
  wildcard sequence<integer> _exampleRoots;
  wildcard sequence<string> _exampleRootsTags;
  wildcard dictionary<integer, sequence<integer> > _examplesTree;
}
