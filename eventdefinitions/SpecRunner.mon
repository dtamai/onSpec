package com.dtamai.onspec;

event SpecRunner {
  integer _specId;

  constant integer ROOT_ID := 0;
  //TODO: configuration?
  constant float timeout := 0.2;

  action addContext(string text) returns integer {
    integer id := _getId();
    __contexts[id] := _ContextDescription(id, text, __currContext.parentContexts.clone());
    _pendingContextsId.append(id);
    _exampleRootsTags.append(_currTags);
    _pendingExamplesIdByContext.add(id, new sequence<integer>);
    _currTags := "";
    return id;
  }

  action addSpec(string text) returns integer {
    integer id := _getId();
    __examples[id] := _SpecDescription(id, text, __currContext.parentContexts.clone());
    _pendingExamplesIdByContext[_cursor].append(id);
    _currTags := "";
    return id;
  }

  action addTags(string tags) {
    _currTags := tags;
  }

  action run(action<> runnable, integer specId) {
    self._specId := specId;
    _entryPoint := runnable;
    _doSpawn();
  }

  action _getCurrentContext() returns string {
    return _stringfyContextForExample(_cursor);
  }

  action _stringfyContextForExample(integer exampleId) returns string {
    sequence<string> contexts := [];
    integer ctxId;
    for ctxId in __examples[exampleId].parentContexts {
      if ctxId = ROOT_ID then { continue; }
      contexts.append(__contexts[ctxId].text);
    }
    contexts.append(__examples[exampleId].text);
    return ": ".join(contexts);
  }

  action _getId() returns integer{
    return integer.getUnique();
  }

  action _listenProgressionEvents() {
    Skip s;
    on all Skip():s {
      route _Skip(_getCurrentContext());
    }

    on all Success() {
      route _Success();
    }

    Failure f;
    on all Failure():f {
      route _Failure(f.reason, _getCurrentContext());
    }

    on all Done() {
      route _SpecDone(_cursor);
    }
  }

  action _doSpawn() {
    spawn _runEntry;
  }

  action _runEntry() {
    __currContext := _createRootContext(self._specId);
    _listenProgressionEvents();
    _entryPoint();
    _runContext();
  }

  action _runContext() {
    if _pendingContextsId.size() > 0 then {
      _cursor := _pendingContextsId[0];
      _updateCurrentContext(_cursor);

      route Spec(_cursor);
      on completed Spec(_cursor) {
        _runExample(_cursor);
      }
    } else {
      route _SpecEnd(self._specId);
      die;
    }
  }

  action _runExample(integer contextId) {
    if _pendingExamplesIdByContext[contextId].size() > 0 then {
      integer exampleId := _pendingExamplesIdByContext[contextId][0];
      _cursor := exampleId;

      spawn _reallyRun(exampleId);
      on _SpecDone(exampleId) {
        _pendingExamplesIdByContext[contextId].remove(0);
        _runExample(contextId);
      }
    } else {
      _pendingContextsId.remove(0);
      _runContext();
    }
  }

  action _reallyRun(integer exampleId) {
    _entryPoint();
    _SpecDescription example := __examples[exampleId];

    integer ctxId;
    for ctxId in example.parentContexts {
      if ctxId = ROOT_ID then { continue; }
      route Spec(ctxId);
    }

    route Spec(exampleId);
    on wait (timeout) {
      route _Failure("timeout", _stringfyContextForExample(exampleId));
      route _SpecDone(exampleId);
    }
    on _SpecDone(exampleId) {
      die;
    }
  }

  action _createRootContext(integer id) returns _ContextDescription {
    _ContextDescription c := new _ContextDescription;
    c.id := id;
    c.parentContexts := [ROOT_ID];
    return c;
  }

  action _updateCurrentContext(integer id) {
    __currContext := __contexts[id];
    __currContext.parentContexts.append(id);
  }

  action<> _entryPoint;
  string _currTags;
  integer _cursor;
  sequence<integer> _pendingContextsId;
  sequence<string> _exampleRootsTags;
  dictionary<integer, sequence<integer> > _pendingExamplesIdByContext;
  dictionary<integer, _ContextDescription> __contexts;
  dictionary<integer, _SpecDescription> __examples;
  _ContextDescription __currContext;
  chunk __deadWeight;
}
