package com.dtamai.onspec;

event SpecRunner {
  integer _specId;

  action addContext(string text) returns integer {
    integer id := _getId();
    __contexts[id] := _ContextDescription(id, text, __currContext.parentContexts.clone());
    _pendingContextsId.append(id);
    _exampleRootsTags.append(_currTags);
    _pendingExamplesIdByContext.add(id, new sequence<integer>);
    _currTags := "";
    return id;
  }

  action addSpec(string text) returns integer {
    integer id := _getId();
    __examples[id] := _SpecDescription(id, text, __currContext.parentContexts.clone());
    _pendingExamplesIdByContext[_cursor].append(id);
    _currTags := "";
    return id;
  }

  action addTags(string tags) {
    _currTags := tags;
  }

  action run(action<> runnable, integer specId) {
    self._specId := specId;
    _entryPoint := runnable;
    _doSpawn();
  }

  action getCurrentSpec() returns integer {
    return _cursor;
  }

  action _getId() returns integer{
    return integer.getUnique();
  }

  action _doSpawn() {
    spawn _runEntry;
  }

  action _runEntry() {
    __currContext := _createRootContext(self._specId);
    _entryPoint();
    _runContext();
  }

  action _runContext() {
    if _pendingContextsId.size() > 0 then {
      _cursor := _pendingContextsId[0];
      _updateCurrentContext(_cursor);

      route Spec(_cursor);
      on completed Spec(_cursor) {
        _runExample(_cursor);
      }
    } else {
      route _SpecEnd(self._specId);
      die;
    }
  }

  action _runExample(integer rootId) {
    integer exampleId := _pendingExamplesIdByContext[rootId][0];
    _cursor := exampleId;
    route Spec(exampleId);
    on _SpecDone(exampleId) {
      _pendingExamplesIdByContext[rootId].remove(0);
      if _pendingExamplesIdByContext[rootId].size() > 0 then {
        _runExample(rootId);
      } else {
        _pendingContextsId.remove(0);
        _runContext();
      }
    }
  }

  action _createRootContext(integer id) returns _ContextDescription {
    _ContextDescription c := new _ContextDescription;
    c.id := id;
    c.parentContexts := [id];
    return c;
  }

  action _updateCurrentContext(integer id) {
    __currContext := __contexts[id];
    __currContext.parentContexts.append(id);
  }

  action<> _entryPoint;
  string _currTags;
  integer _cursor;
  sequence<integer> _pendingContextsId;
  sequence<string> _exampleRootsTags;
  dictionary<integer, sequence<integer> > _pendingExamplesIdByContext;
  dictionary<integer, _ContextDescription> __contexts;
  dictionary<integer, _SpecDescription> __examples;
  _ContextDescription __currContext;
  chunk __deadWeight;
}
