package org.onspec;

event TraverseInterface {
	action<SpecNode> onEnterContext;
	action<SpecNode> onLeaveContext;
	action<SpecNode> onExample;
}

/**
 * Container for the results of a suite run
 */
event SuiteResult {

  constant integer ROOT_CTX_ID := 0;
  constant integer ORPHANS_CTX_ID := -2;

  wildcard sequence<integer /*exampleId*/> examplesOrder;

  wildcard dictionary<integer /*nodeId*/, SpecNode> nodes;

  wildcard float duration;

  wildcard SuiteConfiguration config;

  action init(SuiteConfiguration config) {
    self.config := config;
    nodes[ROOT_CTX_ID] := _newContextNode(ROOT_CTX_ID, "root");
    nodes[ORPHANS_CTX_ID] := _newContextNode(ORPHANS_CTX_ID, "orphans");
  }

  action _newContextNode(integer id, string text) returns SpecNode {
    SpecNode node := new SpecNode;
    node.id := id;
    node.text := text;
    return node;
  }

  action getNode(integer nodeId) returns SpecNode {
    return nodes[nodeId];
  }

  action hasNode(integer nodeId) returns boolean {
    return nodes.hasKey(nodeId);
  }

  action getNodes() returns sequence<SpecNode> {
    return nodes.values();
  }

  action getSkips() returns sequence<SpecNode> {
    return filterIn(filterInSkips);
  }

  action getFailures() returns sequence<SpecNode> {
    return filterIn(filterInFailures);
  }

  action getErrors() returns sequence<SpecNode> {
    return filterIn(filterInErrors);
  }

	action getSuccesses() returns sequence<SpecNode> {
		return filterIn(filterInSuccesses);
	}

  action filterIn(action<SpecNode> returns boolean filter) returns sequence<SpecNode> {
    sequence<SpecNode> result := [];
    SpecNode node;
    for node in getNodes() {
      if filter(node) then {
        result.append(node);
      }
    }

    return result;
  }

  action filterInSkips(SpecNode node) returns boolean {
    return node.results.indexOf(SpecResult.SKIP) > -1;
  }

  action filterInFailures(SpecNode node) returns boolean {
    return node.results.indexOf(SpecResult.FAILURE) > -1;
  }

  action filterInErrors(SpecNode node) returns boolean {
    return node.results.indexOf(SpecResult.ERROR) > -1;
  }

	action filterInSuccesses(SpecNode node) returns boolean {
		return node.results.size() = 1 and node.results[0] = ".";
	}

  action defineExamplesOrder(sequence<integer> order) {
    examplesOrder.appendSequence(order.clone());
  }

  action addNode(SpecNode node, integer parentId) {
    nodes[node.id] := node;
    nodes[parentId].appendChildren(node.id);
  }

  action registerFailure(integer id, string text) {
    string t := "'" + expandContextString(id) + "' failed: " + text;
    registerResult(id, SpecResult.FAILURE, t);
  }

  action registerSuccess(integer id) {
    registerResult(id, SpecResult.SUCCESS, "");
  }

  action registerSkip(integer id, string text) {
    string t := "'" + expandContextString(id) + "' skipped: " + text;
    registerResult(id, SpecResult.SKIP, t);
  }

  action registerError(integer id, string text) {
    string t := "'" + expandContextString(id) + "' ERROR: " + text;
    registerResult(id, SpecResult.ERROR, t);
  }

  action registerResult(integer id, string status, string text) {
    // Examples that are ignored or are unreacheable won't be listed
    // in the complete examples from the SuiteRunner, for completeness,
    // appending them to that list
    if examplesOrder.indexOf(id) = -1 then {
      examplesOrder.append(id);
    }

    if hasNode(id) then {
      SpecNode node := getNode(id);
      node.addResult(status, text);
    }
  }

  action registerDuration(integer id, float duration) {
    if hasNode(id) then {
      SpecNode node := getNode(id);
      node.duration := duration;
    }
  }

  /*
   * Actions to keep the results the same while improving how the results
   * are stored
   */
  action expandContextString(integer exampleId) returns string {
    return " ".join(getContextDescriptionList(exampleId));
  }

  action getContextDescriptionList(integer exampleId) returns sequence<string> {
    sequence<string> ctxList := contextsToTexts(nodes[exampleId].ancestorsId);
    ctxList.append(nodes[exampleId].text);
    return ctxList;
  }

  action contextsToTexts(sequence<integer> ctxIds) returns sequence<string> {
    sequence<string> text := [];
    integer ctxId;
    for ctxId in ctxIds {
      text.append(nodes[ctxId].text);
    }
    return text;
  }

  action traverse(TraverseInterface iface) {
    SpecNode root := nodes[ROOT_CTX_ID];
    _traverseContext(root, iface);

    SpecNode orphans := nodes[ORPHANS_CTX_ID];
    _traverseContext(orphans, iface);
  }

  action _traverseContext(SpecNode context, TraverseInterface iface) {
    iface.onEnterContext(context);
    SpecNode currNode;
    integer id;
    for id in context.childrenId {
      currNode := nodes[id];
      if currNode.isTerminal then {
        iface.onExample(currNode);
      } else {
        _traverseContext(currNode, iface);
      }
    }
    iface.onLeaveContext(context);
  }
}

