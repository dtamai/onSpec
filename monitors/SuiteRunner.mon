package org.onspec.internal;

using org.onspec.NewSuite;
using org.onspec.SuiteConfiguration;
using org.onspec.SuiteResult;
using org.onspec.SpecNode;
using org.onspec.SpecResult;

/**
 * Monitor that manages running specs.
 * @listens NewSuite Runs a new spec suite
 * @listens SuiteConfiguration Configure (optional) how the suite runs
 */
monitor SuiteRunner {
  /** @private */
  sequence<integer> specs := [];
  /** @private */
  dictionary<integer /*id*/, ContextDescription> contexts := {};
  /** @private */
  dictionary<integer /*id*/, ExampleDescription> examples := {};
  /** @private */
  dictionary<integer, sequence<string> > failures := {};
  /** @private */
  dictionary<integer, sequence<string> > successes := {};
  /** @private */
  dictionary<integer, sequence<string> > skips := {};
  /** @private */
  dictionary<integer, sequence<string> > errors := {};
  /** @private */
  SuiteResult suiteResult;
  /** @private */
  boolean isConfigured := false;
  /** @private */
  SuiteConfiguration config;

  import "TimeFormatPlugin" as time;
  /** @private */
  float beginTime;

  /** @private */
  action onload() {
    on all SuiteConfiguration():config {
      isConfigured := true;
      handleConfiguration();
    }

    on all NewSuite() {
      if not isConfigured then {
        useDefaultConfiguration();
        // Do not cache configuration
        on completed SuiteConfiguration() {
          isConfigured := false;
        }
      }
      beginTime := time.getMicroTime();
      spawn handleNewSuite();
    }
  }

  /** @private */
  action handleNewSuite() {
    suiteResult := new SuiteResult;
    suiteResult.nodes[0] := newContextNode(0, "");

    route SpecDiscover();

    SpecPresent spec;
    listener disc := on all SpecPresent():spec {
      specs.append(spec.id);
    }

    ContextDescription ctx;
    on all ContextDescription():ctx {
      contexts[ctx.id] := ctx;

      registerContext(ctx);
    }

    ExampleDescription ex;
    on all ExampleDescription():ex {
      examples[ex.id] := ex;

      registerExample(ex);
    }

    SkippedExampleDescription skip;
    on all SkippedExampleDescription():skip {
      registerSkippedExample(skip);
    }

    IgnoredExampleDescription ignore;
    on all IgnoredExampleDescription():ignore {
      registerIgnoredExample(ignore);
    }

    on completed SpecDiscover() {
      disc.quit();

      // Remove configuration items not required to run examples
      SuiteConfiguration downstreamConfig := config.clone();
      downstreamConfig.removeParam(SuiteConfiguration.randomSeedParamName);
      route SpecPrepare(downstreamConfig);

      SpecReady r;
      sequence<integer> knownSpecs := specs.clone();
      listener ready := on all SpecReady():r {
        knownSpecs.remove(knownSpecs.indexOf(r.id));
        if knownSpecs.size() = 0 then {
          ready.quit();
          runExamples();
        }
      }
    }

    Failure f;
    on all Failure():f {
      registerFailure(f.id,
          "'" + expandContextString(f.id) + "' failed: " + f.reason);
    }

    Success su;
    on all Success():su {
      registerSuccess(su.id);
    }

    Skip s;
    on all Skip():s {
      registerSkip(s.id,
          "'" + expandContextString(s.id) + "' skipped");
    }

    Error e;
    on all Error():e {
      registerError(e.id,
          "'" + expandContextString(e.id) + "' ERROR: " + e.reason);
    }

  }

  action registerContext(ContextDescription ctx) {
    suiteResult.nodes[ctx.id] := newContextNode(ctx.id, ctx.text);
    suiteResult.nodes[ctx.getParentId()].appendChildren(ctx.id);
  }

  action registerExample(ExampleDescription ex) {
    suiteResult.nodes[ex.id] := newExampleNode(ex.id, ex.text);
    suiteResult.nodes[ex.getParentId()].appendChildren(ex.id);
  }

  action registerSkippedExample(SkippedExampleDescription skip) {
    suiteResult.nodes[skip.id] := newExampleNode(skip.id, skip.text);
    registerError(skip.id,
        "'" + " ".join(contextsToTexts(skip.parentContextsId)) + " " + skip.text + "' " + skip.reason);
  }

  action registerIgnoredExample(IgnoredExampleDescription ignore) {
    suiteResult.nodes[ignore.id] := newExampleNode(ignore.id, ignore.text);
    registerSkip(ignore.id,
        "'" + " ".join(contextsToTexts(ignore.parentContextsId)) + " " + ignore.text + "' ignored");
  }

  action newExampleNode(integer id, string text) returns SpecNode {
    SpecNode node := new SpecNode;
    node.id := id;
    node.text := text;
    node.isTerminal := true;
    return node;
  }

  action newContextNode(integer id, string text) returns SpecNode {
    SpecNode node := new SpecNode;
    node.id := id;
    node.text := text;
    return node;
  }

  action registerFailure(integer id, string text) {
    registerResult(id, SpecResult.FAILURE, failures, text);
  }

  action registerSuccess(integer id) {
    registerResult(id, SpecResult.SUCCESS, successes, "");
  }

  action registerSkip(integer id, string text) {
    registerResult(id, SpecResult.SKIP, skips, text);
  }

  action registerError(integer id, string text) {
    registerResult(id, SpecResult.ERROR, errors, text);
  }

  action registerResult(integer id, string status, dictionary<integer, sequence<string> > bucket, string text) {

    if suiteResult.examplesOrder.indexOf(id) = -1 then {
      suiteResult.examplesOrder.append(id);
    }

    if suiteResult.hasNode(id) then {
      SpecNode node := suiteResult.getNode(id);
      node.addResult(status, text);
    }

    if not bucket.hasKey(id) then {
      bucket[id] := new sequence<string>;
    }
    bucket[id].append(text);
  }

  /** @private */
  action handleConfiguration() {
    config := config.merge(config.fromString(config.configString));
    if config.shouldRandomize() then {
      if not config.hasRandomSeed() then {
        config.setRandomSeed((new RandomGenerator).next());
        print "Random seed (use the config below to repeat examples order):";
        print "," + SuiteConfiguration.randomSeedParamName + ":" + config.getRandomSeed().toString();
      } else {
        print "Using configured random seed: " + config.getRandomSeed().toString();
      }
    } else {
      print "!! [WARN] Runing specs in order !!";
    }
  }

  /** @private */
  action useDefaultConfiguration() {
    route new SuiteConfiguration;
  }

  // Used while running examples, is a modifiable copy of the examples list
  sequence<integer> pendingExamplesId;
  action runExamples() {
    pendingExamplesId := defineExamplesOrder(examples.keys());
    suiteResult.examplesOrder.appendSequence(pendingExamplesId.clone());
    runFirstExample();
  }

  action runFirstExample() {
    if pendingExamplesId.size() > 0 then {
      integer exId := pendingExamplesId[0];

       route RunExample(exId);
       on wait ((examples[exId].config.getTimeout()*2.0) + 0.5) and not SpecDone(exId) {
         route org.onspec.internal.Error(exId, "example died unexpectedly");
         route org.onspec.Done();
       }
       on completed SpecDone(exId) {
         pendingExamplesId.remove(0);
         runFirstExample();
       }
    } else {
      endSuite();
    }
  }

  action defineExamplesOrder(sequence<integer> list) returns sequence<integer> {
    if config.shouldRandomize() then {
      RandomGenerator generator := new RandomGenerator;
      generator.init(config.getRandomSeed());
      return Shuffler(generator).shuffle(list);
    } else {
      return list;
    }
  }

  /** @private */
  action expandContextString(integer exampleId) returns string {
    return " ".join(getContextDescriptionList(exampleId));
  }

  /** @private */
  action getContextDescriptionList(integer exampleId) returns sequence<string> {
    sequence<string> ctxList := contextsToTexts(examples[exampleId].parentContextsId);
    ctxList.append(examples[exampleId].text);
    return ctxList;
  }

  /** @private */
  action contextsToTexts(sequence<integer> ctxIds) returns sequence<string> {
    sequence<string> text := [];
    integer ctxId;
    for ctxId in ctxIds {
      text.append(contexts[ctxId].text);
    }
    return text;
  }

  /** @private */
  action endSuite() {
    print "";
    sequence<string> orderedResults := [];
    integer id;
    for id in suiteResult.examplesOrder {
      orderedResults.append(suiteResult.getNode(id).getFormattedResult());
    }
    print "".join(orderedResults);
    print orderedResults.size().toString() + " example(s) in " +
      (time.getMicroTime() - beginTime).formatFixed(6) + "s | " +
      skips.size().toString() + " skip(s) | " +
      failures.size().toString() + " failure(s) | " +
      errors.size().toString() + " error(s)";
    print "";

    sequence<sequence<string> > skips := [];
    SpecNode node;
    for node in suiteResult.getSkips() {
      skips.append(node.reasons);
    }

    sequence<string> r;
    if skips.size() > 0 then {
      print "Skips: ";
      for r in skips {
        print "\n".join(r);
      }
      print "";
    }
    if failures.size() > 0 then {
      print "Failures: ";
      for r in failures.values() {
        print "\n".join(r);
      }
      print "";
    }
    if errors.size() > 0 then {
      print "Errors: ";
      for r in errors.values() {
        print "\n".join(r);
      }
      print "";
    }
    print suiteResult.toString();
    die;
  }
}

monitor ExampleResultListener {
  action onload() {
    RunExample ex;
    on all RunExample():ex {
      spawn listenResult(ex.id);
    }
  }

  action listenResult(integer id) {
    org.onspec.Skip s;
    on org.onspec.Skip():s {
      route Skip(id);
    }

    on org.onspec.Success() {
      route Success(id);
    }

    org.onspec.Failure f;
    on all org.onspec.Failure():f {
      route Failure(id, f.reason);
    }

    on org.onspec.Done() {
      enqueue SpecDone(id);
    }

    on SpecDone(id) {
      die;
    }
  }
}

