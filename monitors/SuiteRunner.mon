package org.onspec.internal;

using org.onspec.NewSuite;
using org.onspec.SuiteConfiguration;

/**
 * Monitor that manages running specs.
 * @listens NewSuite Runs a new spec suite
 */
monitor SuiteRunner {
  /** @private */
  sequence<integer> specs := [];
  /** @private */
  dictionary<integer /*id*/, ContextDescription> contexts := {};
  /** @private */
  dictionary<integer /*id*/, ExampleDescription> examples := {};
  /** @private */
  sequence<string> results := [];
  /** @private */
  sequence<string> failures := [];
  /** @private */
  sequence<string> skips := [];
  /** @private */
  sequence<string> errors := [];
  /** @private */
  SuiteConfiguration config;

  import "TimeFormatPlugin" as time;
  /** @private */
  float beginTime;

  /** @private */
  action onload() {
    on all SuiteConfiguration():config {
      handleConfiguration();
    }

    on all NewSuite() {
      beginTime := time.getMicroTime();
      spawn handleNewSuite();
    }
  }

  /** @private */
  action handleNewSuite() {
    route SpecDiscover();

    SpecPresent spec;
    listener disc := on all SpecPresent():spec {
      specs.append(spec.id);
    }

    ContextDescription ctx;
    on all ContextDescription():ctx {
      contexts[ctx.id] := ctx;
    }

    ExampleDescription ex;
    on all ExampleDescription():ex {
      examples[ex.id] := ex;
    }

    on completed SpecDiscover() {
      disc.quit();
      route SpecPrepare(config);

      SpecReady r;
      sequence<integer> knownSpecs := specs.clone();
      listener ready := on all SpecReady():r {
        knownSpecs.remove(knownSpecs.indexOf(r.id));
        if knownSpecs.size() = 0 then {
          ready.quit();
          runExamples();
        }
      }
    }

    Failure f;
    on all Failure():f {
      results.append("F");
      failures.append("'" + expandContextString(f.id) + "' failed: " + f.reason);
    }

    on all Success() {
      results.append(".");
    }

    Skip s;
    on all Skip():s {
      results.append("S");
      skips.append("'" + expandContextString(s.id) + "' skipped");
    }

    Error e;
    on all Error():e {
      results.append("E");
      errors.append("'" + expandContextString(e.id) + "' ERROR: " + e.reason);
    }

  }

  /** @private */
  action handleConfiguration() {
    if config.shouldRandomize() then {
      if not config.hasRandomSeed() then {
        config.setRandomSeed((new RandomGenerator).next());
      }
      print "Random seed: " + config.getRandomSeed().toString();
    } else {
      print "!! [WARN] Runing specs in order !!";
    }
  }

  // Used while running examples, is a modifiable copy of the examples list
  sequence<integer> pendingExamplesId;
  action runExamples() {
    pendingExamplesId := defineExamplesOrder(examples.keys());
    runFirstExample();
  }

  integer cursor;
  action runFirstExample() {
    if pendingExamplesId.size() > 0 then {
      integer exId := pendingExamplesId[0];
      cursor := exId;

       route RunExample(exId);
       on wait ((examples[exId].config.getTimeout()*2.0) + 0.5) and not SpecDone(exId) {
         route org.onspec.internal.Error(exId, "example died unexpectedly");
         route SpecDone(exId);
       }
       on SpecDone(exId) {
         pendingExamplesId.remove(0);
         runFirstExample();
       }
    } else {
      endSuite();
    }
  }

  action defineExamplesOrder(sequence<integer> list) returns sequence<integer> {
    if config.shouldRandomize() then {
      RandomGenerator generator := new RandomGenerator;
      generator.init(config.getRandomSeed());
      return Shuffler(generator).shuffle(list);
    } else {
      return list;
    }
  }


  /** @private */
  action runSpec() {
    if specs.size() <= 0 then { endSuite(); }

    integer currId := specs[0];
    route SpecBegin(currId, config);
    on SpecEnd(currId) {
      specs.remove(0);
      runSpec();
    }
  }

  /** @private */
  action expandContextString(integer exampleId) returns string {
    return " ".join(getContextDescriptionList(exampleId));
  }

  /** @private */
  action getContextDescriptionList(integer exampleId) returns sequence<string> {
    sequence<string> ctxList := [];
    integer ctxId;
    for ctxId in examples[exampleId].parentContextsId {
      ctxList.append(contexts[ctxId].text);
    }
    ctxList.append(examples[exampleId].text);
    return ctxList;
  }

  /** @private */
  action endSuite() {
    print "";
    print "".join(results);
    print results.size().toString() + " example(s) in " +
      (time.getMicroTime() - beginTime).formatFixed(6) + "s | " +
      skips.size().toString() + " skip(s) | " +
      failures.size().toString() + " failure(s) | " +
      errors.size().toString() + " error(s)";
    print "";
    if skips.size() > 0 then {
      print "Skips: ";
      print "\n".join(skips);
      print "";
    }
    if failures.size() > 0 then {
      print "Failures: ";
      print "\n".join(failures);
      print "";
    }
    if errors.size() > 0 then {
      print "Errors: ";
      print "\n".join(errors);
      print "";
    }
    die;
  }
}

monitor ExampleResultListener {
  action onload() {
    RunExample ex;
    on all RunExample():ex {
      spawn listenResult(ex.id);
    }
  }

  action listenResult(integer id) {
    org.onspec.Skip s;
    on org.onspec.Skip():s {
      route Skip(id);
    }

    on org.onspec.Success() {
      route Success(id);
    }

    org.onspec.Failure f;
    on org.onspec.Failure():f {
      route Failure(id, f.reason);
    }

    on org.onspec.Done() {
      route SpecDone(id);
      die;
    }
  }
}

