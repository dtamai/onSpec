package org.onspec.internal;

using org.onspec.NewSuite;
using org.onspec.SuiteConfiguration;

/**
 * Monitor that manages running specs.
 * @listens NewSuite Runs a new spec suite
 */
monitor SuiteRunner {
  /** @private */
  sequence<integer> specs := [];
  /** @private */
  dictionary<integer /*id*/, ContextDescription> contexts := {};
  /** @private */
  dictionary<integer /*id*/, ExampleDescription> examples := {};
  /** @private */
  sequence<string> results := [];
  /** @private */
  sequence<string> failures := [];
  /** @private */
  sequence<string> skips := [];
  /** @private */
  sequence<string> errors := [];
  /** @private */
  SuiteConfiguration config;

  import "TimeFormatPlugin" as time;
  /** @private */
  float beginTime;

  /** @private */
  action onload() {
    on all SuiteConfiguration():config {
      handleConfiguration();
    }

    on all NewSuite() {
      beginTime := time.getMicroTime();
      spawn handleNewSuite();
    }
  }

  /** @private */
  action handleNewSuite() {
    route SpecDiscover();

    SpecPresent spec;
    listener disc := on all SpecPresent():spec {
      specs.append(spec.id);
    }

    ContextDescription ctx;
    on all ContextDescription():ctx {
      contexts[ctx.id] := ctx;
    }

    ExampleDescription ex;
    on all ExampleDescription():ex {
      examples[ex.id] := ex;
    }

    on completed SpecDiscover() {
      disc.quit();
      runSpec();
    }

    Failure f;
    on all Failure():f {
      results.append("F");
      failures.append("'" + expandContextString(f.context) + "' failed: " + f.reason);
    }

    on all Success() {
      results.append(".");
    }

    Skip s;
    on all Skip():s {
      results.append("S");
      skips.append("'" + expandContextString(s.context) + "' skipped");
    }

    Error e;
    on all Error():e {
      results.append("E");
      errors.append("'" + expandContextString(e.context) + "' ERROR: " + e.reason);
    }

  }

  /** @private */
  action handleConfiguration() {
    if config.shouldRandomize() then {
      if not config.hasRandomSeed() then {
        config.setRandomSeed((new RandomGenerator).next());
      }
      print "Random seed: " + config.getRandomSeed().toString();
    } else {
      print "!! [WARN] Runing specs in order !!";
    }
  }

  /** @private */
  action runSpec() {
    if specs.size() <= 0 then { endSuite(); }

    integer currId := specs[0];
    route SpecBegin(currId, config);
    on SpecEnd(currId) {
      specs.remove(0);
      runSpec();
    }
  }

  /** @private */
  action expandContextString(sequence<string> context) returns string {
    return " ".join(context);
  }

  /** @private */
  action endSuite() {
    print "";
    print "".join(results);
    print results.size().toString() + " example(s) in " +
      (time.getMicroTime() - beginTime).formatFixed(6) + "s | " +
      skips.size().toString() + " skip(s) | " +
      failures.size().toString() + " failure(s) | " +
      errors.size().toString() + " error(s)";
    print "";
    if skips.size() > 0 then {
      print "Skips: ";
      print "\n".join(skips);
      print "";
    }
    if failures.size() > 0 then {
      print "Failures: ";
      print "\n".join(failures);
      print "";
    }
    if errors.size() > 0 then {
      print "Errors: ";
      print "\n".join(errors);
      print "";
    }
    die;
  }
}

