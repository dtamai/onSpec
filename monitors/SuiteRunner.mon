package org.onspec.internal;

using org.onspec.SuiteConfiguration;
using org.onspec.SuiteResult;

/**
 * @private
 * Monitor that manages running specs.
 * @listens NewSuite Runs a new spec suite
 * @listens SuiteConfiguration Configure (optional) how the suite runs
 */
monitor SuiteRunner {
  sequence<integer> specs := [];
  dictionary<integer /*id*/, ContextDescription> contexts := {};
  dictionary<integer /*id*/, ExampleDescription> examples := {};
  SuiteResult suiteResult;
  boolean isConfigured := false;
  SuiteConfiguration config;

  import "TimeFormatPlugin" as time;
  float beginTime;

  action onload() {
    on all SuiteConfiguration():config {
      isConfigured := true;
      handleConfiguration();
    }

    on all org.onspec.NewSuite() {
      if not isConfigured then {
        useDefaultConfiguration();
        // Do not cache configuration
        on completed SuiteConfiguration() {
          isConfigured := false;
        }
      }
      beginTime := time.getMicroTime();
      spawn handleNewSuite();
    }
  }

  action handleNewSuite() {
    suiteResult.init(config);

    route SpecDiscover();

    SpecPresent spec;
    listener disc := on all SpecPresent():spec {
      specs.append(spec.id);
    }

    ContextDescription ctx;
    on all ContextDescription():ctx {
      registerContext(ctx);
    }

    ExampleDescription ex;
    on all ExampleDescription():ex {
      registerExample(ex);
    }

    SkippedExampleDescription skip;
    on all SkippedExampleDescription():skip {
      registerSkippedExample(skip);
    }

    on completed SpecDiscover() {
      disc.quit();

      // Remove configuration items not required to run examples
      SuiteConfiguration downstreamConfig := config.clone();
      downstreamConfig.removeParam(SuiteConfiguration.randomSeedParamName);
      route SpecPrepare(downstreamConfig);

      SpecReady r;
      sequence<integer> knownSpecs := specs.clone();
      listener ready := on all SpecReady():r {
        knownSpecs.remove(knownSpecs.indexOf(r.id));
        if knownSpecs.size() = 0 then {
          ready.quit();
          runExamples();
        }
      }
    }

    Failure f;
    on all Failure():f {
      suiteResult.registerFailure(f.id, f.reason);
    }

    Success su;
    on all Success():su {
      suiteResult.registerSuccess(su.id);
    }

    Skip s;
    on all Skip():s {
      suiteResult.registerSkip(s.id, "Suite#skip");
    }

    Error e;
    on all Error():e {
      suiteResult.registerError(e.id, e.reason);
    }

  }

  action registerContext(ContextDescription ctx) {
    contexts[ctx.id] := ctx;
    suiteResult.addNode(newContextNode(ctx.id, ctx.text), ctx.getParentId());
  }

  action registerExample(ExampleDescription ex) {
    examples[ex.id] := ex;
    suiteResult.addNode(newExampleNode(ex.id, ex.text, ex.parentContextsId), ex.getParentId());
  }

  action registerSkippedExample(SkippedExampleDescription skip) {
    suiteResult.addNode(
      newExampleNode(skip.id, skip.text, skip.parentContextsId),
      SuiteResult.ORPHANS_CTX_ID
    );
    suiteResult.registerSkip(skip.id, skip.reason);
  }

  action newExampleNode(integer id, string text, sequence<integer> ancestorsId)
  returns org.onspec.SpecNode {
    org.onspec.SpecNode node := new org.onspec.SpecNode;
    node.id := id;
    node.text := text;
    node.isTerminal := true;
    node.ancestorsId := ancestorsId;
    return node;
  }

  action newContextNode(integer id, string text)
  returns org.onspec.SpecNode {
    org.onspec.SpecNode node := new org.onspec.SpecNode;
    node.id := id;
    node.text := text;
    return node;
  }

  action handleConfiguration() {
    if config.shouldRandomize() and not config.hasRandomSeed() then {
        config.setRandomSeed((new RandomGenerator).next());
    }
  }

  action useDefaultConfiguration() {
    route new SuiteConfiguration;
  }

  // Used while running examples, is a modifiable copy of the examples list
  sequence<integer> pendingExamplesId;
  action runExamples() {
    pendingExamplesId := defineExamplesOrder(examples.keys());
    suiteResult.defineExamplesOrder(pendingExamplesId);
    runFirstExample();
  }

  action runFirstExample() {
    if pendingExamplesId.size() > 0 then {
      integer exId := pendingExamplesId[0];

       float duration, begin := time.getMicroTime();
       route RunExample(exId);
       on wait ((examples[exId].config.getTimeout()*2.0) + 0.5) and not SpecDone(exId) {
         route org.onspec.internal.Error(exId, "example died unexpectedly");
         route org.onspec.Done();
       }
       on completed SpecDone(exId) {
         suiteResult.registerDuration(exId, time.getMicroTime() - begin);
         pendingExamplesId.remove(0);
         runFirstExample();
       }
    } else {
      endSuite();
    }
  }

  action defineExamplesOrder(sequence<integer> list) returns sequence<integer> {
    if config.shouldRandomize() then {
      RandomGenerator generator := new RandomGenerator;
      generator.init(config.getRandomSeed());
      return Shuffler(generator).shuffle(list);
    } else {
      return list;
    }
  }

  action endSuite() {
    suiteResult.duration := time.getMicroTime() - beginTime;
    route suiteResult;
    die;
  }
}


