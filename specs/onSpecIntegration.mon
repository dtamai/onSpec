package org.onspec;

/*
* Injecting this file should print '[GOOD] Working as expected' in the console
*
* While I still try to find a way to test onSpec using onSpec, this sample
* is a good enough integration test.
*/

event SampleResponse {
  string text;
}

event BadBadEvent {
}

monitor onSpecSampleHelper {
  action onload() {
    on all NewSuite() {
      on SampleResponse("it helped") and
        SampleResponse("upto now it's working") and
        SampleResponse("it did") and
        SampleResponse(". . .") and
        SampleResponse("and they are!") and
        SampleResponse("did I forget something?") {
          print "[GOOD] Working as expected";
        }
    }
  }
}

monitor onSpecSample {
  Suite $;

  action onload() {
    $.init(run);
  }

  action run() {
    on Spec($.describe("First example")) {
      on Spec($.it("helps understand the order of evaluation")) {
        on all BadBadEvent() {
          print "[BAD] Triggered a listener that should not exist";
        }
        route SampleResponse("it helped");
        $.pass();
      }

      on Spec($.describe("has some deep stuff")) {
        on Spec($.it("gives new ideas for a purer EPL testing suite")) {
          route BadBadEvent();
          route SampleResponse("upto now it's working");
          $.pass();
        }
      }
    }

    $.config("timeout:1.0");
    on Spec($.describe("The second example")) {
      on Spec($.describe("some buried knowledge")) {
        on Spec($.it("extends the understanding")) {
          route SampleResponse("it did");
          $.fail("Eventually something breaks");
        }
      }

      on Spec($.it("is like an older brother for the example above")) {
        $.pass();
      }
    }

    on Spec($.describe("The third example")) {
      on Spec($.it("has also has something to say")) {
        route SampleResponse(". . .");
        $.pass();
      }
    }

    on Spec($.describe("The fourth example")) {
      on Spec($.ignore("is ignored")) {
        $.fail("this should not fail");
      }
    }
  }
}

monitor onSpecSample2 {
  Suite _;

  action onload() {
    _.init(run);
  }

  action run() {
    on Spec(_.describe("Another monitor")) {
      on Spec(_.it("verifies two monitors can run")) {
        route SampleResponse("and they are!");
        _.pass();
      }

      _.config("timeout:0.5, tags:slow");
      on Spec(_.it("has that one that times out")) {
        route SampleResponse("did I forget something?");
      }

      on Spec(_.it("survives runtime error")) {
        sequence<integer> empty := [];
        integer error := empty[1000];
        _.done();
      }

      on Spec(_.it("gives many chances for failure")) {
        _.fail("failed once");
        _.fail("failed again");
      }

      on Spec(_.describe("with repeated examples")) {
        // a repeated example being two exmples with the same text in the
        // same file
        on Spec(_.it("skips the second to run")) {
          _.done();
        }

        on Spec(_.it("skips the second to run")) {
          _.done();
        }
      }
    }
  }
}

event O {
  integer n;
}

monitor BeforeAfterSpec {
  Suite _;

  action onload() {
    _.init(run);

    on (O(10) -> O(20) -> O(30))
      and ((O(10) and O(11)) -> O(21) -> (O(30) and O(31))) {
        print "[GOOD] BeforeAfter Ok";
      }
  }

  action run() {
    on Spec(_.describe("Before every context")) {
      on Before() {
        route O(10);
      }

      on Spec(_.it("runs the example")) {
        route O(20);
        _.done();
      }

      on Spec(_.describe("Inner contexts have many before")) {
        on Before() {
          route O(11);
        }

        on After() {
          route O(31);
        }

        on Spec(_.it("runs each of them")) {
          route O(21);
          _.done();
        }
      }

      on After() {
        route O(30);
      }
    }
  }
}
