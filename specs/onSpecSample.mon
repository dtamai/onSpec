package com.dtamai.onspec;

/*
* Injecting this file should print '[GOOD] Working as expected' in the console
*
* While I still try to find a way to test onSpec using onSpec, this sample
* is a good enough integration test.
*/

event SampleResponse {
  string text;
}

monitor onSpecSampleHelper {
  action onload() {
    on all NewSuite() {
      on SampleResponse("it helped") and
        SampleResponse("upto now it's working") and
        SampleResponse("it did") and
        SampleResponse(". . .") and
        SampleResponse("and they are!") and
        SampleResponse("did I forget something?") {
          print "[GOOD] Working as expected";
        }
    }
  }
}

monitor onSpecSample {
  Suite $;

  action onload() {
    $.init(run);
  }

  action run() {
    on Spec($.describe("First example")) {
      on Spec($.it("helps understand the order of evaluation")) {
        route SampleResponse("it helped");
        $.pass();
      }

      on Spec($.describe("has some deep stuff")) {
        on Spec($.it("gives new ideas for a purer EPL testing suite")) {
          route SampleResponse("upto now it's working");
          $.pass();
        }
      }
    }

    on Spec($.describe("The second example")) {
      on Spec($.describe("some buried knowledge")) {
        on Spec($.it("extends the understanding")) {
          route SampleResponse("it did");
          $.fail("Eventually something breaks");
        }
      }
    }

    $.T("slow");
    on Spec($.describe("The third example")) {
      on Spec($.it("has also has something to say")) {
        route SampleResponse(". . .");
        $.pass();
      }
    }
  }
}

monitor onSpecSample2 {
  Suite _;

  action onload() {
    _.init(run);
  }

  action run() {
    on Spec(_.describe("Another monitor")) {
      on Spec(_.it("verifies two monitors can run")) {
        route SampleResponse("and they are!");
        _.skip();
      }

      on Spec(_.it("has that one that times out")) {
        route SampleResponse("did I forget something?");
      }
    }
  }
}

