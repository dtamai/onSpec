package org.onspec;

using org.onspec.expectation.IntegerValue;
using org.onspec.expectation.StringValue;

monitor SuiteConfigurationSpec {
  Suite _;

  action onload() {
    _.init(run);
  }

  action run() {
    string kvPairSep := SuiteConfiguration.kvPairSep;
    string kvSep := SuiteConfiguration.kvSep;

    on Spec(_.describe("SuiteConfiguration")) {
      on Spec(_.describe("#parse")) {

        on Spec(_.it("parses simple string configurations")) {
          string k := "timeout";
          string v := "0.2";
          string conf := k + kvSep + v;
          dictionary<string, string> expected := {k:v};

          dictionary<string, string> actual := (new SuiteConfiguration).fromString(conf).config;

          IntegerValue(actual.size()).mustBe(1);
          StringValue(actual.keys()[0]).mustBe(k);
          StringValue(actual.values()[0]).mustBe(v);
          _.done();
        }

        on Spec(_.it("parses config string with multiple pairs")) {
          string conf := "k1:v1, k2:v2";
          dictionary<string, string> expected := {"k1":"v1", "k2":"v2"};

          dictionary<string, string> actual := (new SuiteConfiguration).fromString(conf).config;

          IntegerValue(actual.size()).mustBe(expected.size());
          StringValue(actual["k1"]).mustBe(expected["k1"]);
          StringValue(actual["k2"]).mustBe(expected["k2"]);
          _.done();
        }

        on Spec(_.it("ignores key-value pairs with invalid separator")) {
          string invalid := "k;v";
          dictionary<string, string> expected := {};

          dictionary<string, string> actual := (new SuiteConfiguration).fromString(invalid).config;

          IntegerValue(actual.size()).mustBe(expected.size());
          _.done();
        }

        on Spec(_.it("ignores multiple pairs with invalid pair separator")) {
          string invalid := "k1:v1;k2:v2";
          dictionary<string, string> expected := {};

          dictionary<string, string> actual := (new SuiteConfiguration).fromString(invalid).config;

          IntegerValue(actual.size()).mustBe(expected.size());
          _.done();
        }
      }

      on Spec(_.describe("#merge")) {

        on Spec(_.it("merges two configurations")) {
          SuiteConfiguration conf1, conf2 := new SuiteConfiguration;
          conf1 := SuiteConfiguration.fromString(conf2, "k1:v1");
          conf2 := SuiteConfiguration.fromString(conf2, "k2:v2");
          dictionary<string, string> expected := {"k1":"v1", "k2":"v2"};

          dictionary<string, string> actual := conf1.merge(conf2).config;

          IntegerValue(actual.size()).mustBe(expected.size());
          StringValue(actual["k1"]).mustBe(expected["k1"]);
          StringValue(actual["k2"]).mustBe(expected["k2"]);
          _.done();
        }

        on Spec(_.it("has an incoming param overwrite the base config")) {
          SuiteConfiguration conf1, conf2 := new SuiteConfiguration;
          conf1 := SuiteConfiguration.fromString(conf2, "k1:v1");
          conf2 := SuiteConfiguration.fromString(conf2, "k1:v2");
          dictionary<string, string> expected := {"k1":"v2"};

          dictionary<string, string> actual := conf1.merge(conf2).config;

          IntegerValue(actual.size()).mustBe(expected.size());
          StringValue(actual["k1"]).mustBe(expected["k1"]);
          _.done();
        }
      }
    }
  }
}
