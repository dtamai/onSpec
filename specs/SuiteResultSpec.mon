package org.onspec;

using org.onspec.expectation.IntegerValue;

monitor SuiteResultSpec {
	Suite _;

	action onload() {
		_.init(run);
	}

	SuiteResult result;
	integer callCount;
	sequence<integer> callOrder;

	action run() {
		on Spec(_.describe("SuiteResult")) {
			on Spec(_.describe("#traverse")) {
				on Before() {
					result := buildResult();
					callCount := 0;
					callOrder := new sequence<integer>;
				}

				on Spec(_.it("sends onEnterContext callback when entering a context")) {
					TraverseInterface i := TraverseInterface(mockAction, dummyAction, dummyAction);

					result.traverse(i);

					IntegerValue(callCount).mustBe(4);
					_.done();
				}

				on Spec(_.it("sends onLeaveContext callback when leaving a context")) {
					TraverseInterface i := TraverseInterface(dummyAction, mockAction, dummyAction);

					result.traverse(i);

					IntegerValue(callCount).mustBe(4);
					_.done();
				}

				on Spec(_.it("sends onExample callback for each example")) {
					TraverseInterface i := TraverseInterface(dummyAction, dummyAction, mockAction);

					result.traverse(i);

					IntegerValue(callCount).mustBe(5);
					_.done();
				}

				on Spec(_.it("completely traverses each context before leaving")) {
					TraverseInterface i := TraverseInterface(registerId, registerId, registerId);

					result.traverse(i);
					// E:enter | L:leave | .:example  E  E  .   .   L  E  .   .   L  .   L   E   L
					sequence<integer> expectation := [0, 2, 11, 12, 2, 3, 13, 14, 3, 15, 0, -2, -2];

					integer eSize := expectation.size();
					integer cSize := callOrder.size();
					if eSize != cSize then {
						_.fail("Not called as many times as expected. Expected: " + eSize.toString() +
							" Called: " + cSize.toString());
					} else {
						integer k := 0;
						while k < eSize {
							if expectation[k] != callOrder[k] then {
								_.fail("Called in unexpected order. Expected: " + expectation.toString() +
									" Called: " + callOrder.toString());
								break;
							}
						k := k + 1;
						}
					}
					_.done();
				}
			}
		}
	}

	action mockAction(SpecNode n) {
		callCount := callCount + 1;
	}

	action dummyAction(SpecNode _) {}

	action registerId(SpecNode n) {
		callOrder.append(n.id);
	}

	action buildResult() returns SuiteResult {
		/* Build a minimal complex result tree
		|- root:ctx1
		| \- ctx2
		| | \- ex1
		| | \- ex2
		| \- ctx3
		| | \- ex3
		| | \- ex4
		\ \- ex5
		\- orphans:ctxn2
		*/
		SuiteResult r := new SuiteResult;
		r.init(new SuiteConfiguration);
		SpecNode root := r.nodes[SuiteResult.ROOT_CTX_ID];
		SpecNode ctx2 := newContext(2); r.addNode(ctx2, root.id);
		SpecNode ctx3 := newContext(3); r.addNode(ctx3, root.id);

		SpecNode ex1 := newExample(11); r.addNode(ex1, ctx2.id);
		SpecNode ex2 := newExample(12); r.addNode(ex2, ctx2.id);
		SpecNode ex3 := newExample(13); r.addNode(ex3, ctx3.id);
		SpecNode ex4 := newExample(14); r.addNode(ex4, ctx3.id);
		SpecNode ex5 := newExample(15); r.addNode(ex5, root.id);

		return r;
	}

	action newContext(integer id) returns SpecNode {
		SpecNode n := new SpecNode;
		n.id := id;
		n.isTerminal := false;
		return n;
	}

	action newExample(integer id) returns SpecNode {
		SpecNode n := new SpecNode;
		n.id := id;
		n.isTerminal := true;
		return n;
	}
}
